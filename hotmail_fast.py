# ecryption tools by: coophalco
import os, base64, zlib, gzip, lzma, getpass, marshal
from Crypto.Cipher import AES
from Crypto.Protocol.KDF import PBKDF2

PBKDF2_ITERS = 200000
SALT_LEN = 16
# Script Password: @coophalco
def derive_key_from_pass(passphrase: str, salt: bytes) -> bytes:
    return PBKDF2(passphrase.encode("utf-8"), salt, dkLen=16, count=PBKDF2_ITERS)

def multi_decompress(data: bytes):
    lzmaed = zlib.decompress(data)
    gzipped = lzma.decompress(lzmaed)
    marshaled = gzip.decompress(gzipped)
    code = marshal.loads(marshaled)
    return code

def coophalco():
    try:
        b64 = ""
        payload = base64.b64decode(b64)
        salt = payload[:SALT_LEN]
        nonce = payload[SALT_LEN:SALT_LEN+16]
        tag   = payload[SALT_LEN+16:SALT_LEN+32]
        ciphertext = payload[SALT_LEN+32:]

        passphrase = os.getenv("EK") or getpass.getpass("Enter Password: ")
        key = derive_key_from_pass(passphrase, salt)
        cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)

        decrypted = cipher.decrypt_and_verify(ciphertext, tag)
        code = multi_decompress(decrypted)
        exec(code, globals())

    except Exception as e:
        print("Decryption or execution failed:", e)
        raise SystemExit(1)

if __name__ == "__main__":
    coophalco()
