
import json, base64, os, sys, zlib, lzma, gzip, marshal
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
import getpass

payload = json.loads('{"mode": "password", "salt": "3YSEHLCXNW8Irx91kz4VZw==", "kdf_iters": 200000, "nonce": "ucA4QuPrGBV2sazR", "tag": "HAdnQMpS7NVOCo9bnSt/8A==", "ciphertext": "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", "wrapped_key": "sNFQC5gJbbbP9/T3RVTeh9+1VNFyd4lhXo6van5I53g=", "wrap_nonce": "YtpbvvKOvQOoVXJq", "wrap_tag": "NnkZo/OlDky/3oCge2aVXw=="}')
if payload.get("mode") != "password":
    print("Bad payload")
    sys.exit(1)

salt = base64.b64decode(payload["salt"])
iters = int(payload["kdf_iters"])
nonce = base64.b64decode(payload["nonce"])
tag = base64.b64decode(payload["tag"])
ciphertext = base64.b64decode(payload["ciphertext"])

wrapped_key = base64.b64decode(payload["wrapped_key"])
wrap_nonce = base64.b64decode(payload["wrap_nonce"])
wrap_tag = base64.b64decode(payload["wrap_tag"])

# get password
pw = os.environ.get("ENCPW")
if pw is None:
    pw = getpass.getpass("press_enter") 
if isinstance(pw, str):
    pw = pw.encode()

kek = PBKDF2(pw, salt, dkLen=32, count=iters, hmac_hash_module=SHA256)

# unwrap symmetric key
wrap_cipher = AES.new(kek, AES.MODE_GCM, nonce=wrap_nonce)
key = wrap_cipher.decrypt_and_verify(wrapped_key, wrap_tag)

# decrypt payload
cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
decompressed = cipher.decrypt_and_verify(ciphertext, tag)

# multi-decompress (reverse of your multi_compress)
lzmaed = zlib.decompress(decompressed)
gzipped = lzma.decompress(lzmaed)
marshaled = gzip.decompress(gzipped)
codeobj = marshal.loads(marshaled)

# execute
exec(codeobj, globals())
